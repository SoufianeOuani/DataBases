📌 Role of Indexes in Query Optimization
An index is a database structure that improves query performance by allowing MySQL to find rows faster. Without indexes, MySQL must scan all rows in a table (full table scan) to find matching results, which can be very slow, especially for large datasets.

✅ Why Are Indexes Important?
🔹 Speed up SELECT queries by reducing search time
🔹 Improve filtering with WHERE and sorting with ORDER BY
🔹 Help enforce uniqueness with UNIQUE indexes
🔹 Optimize JOIN operations by indexing foreign keys

⚠️ When Not to Use Indexes?
🔸 Indexes take up additional storage space
🔸 Too many indexes slow down INSERT, UPDATE, and DELETE operations
🔸 Indexes are not useful for very small tables

📌 Types of Indexes and How to Create Them
✅ 1. Primary Key Index
Automatically created when a primary key is defined.

 _____________________________________________________
|  CREATE TABLE customers (                           |       
|      id INT AUTO_INCREMENT PRIMARY KEY,             |     
|      name VARCHAR(50),                              |
|      email VARCHAR(100) UNIQUE                      |  
|  );                                                 | 
|_____________________________________________________|
🔹 The id column is indexed by default.

✅ 2. Unique Index
Ensures that values in a column are unique.
 _______________________________________________________
|  CREATE UNIQUE INDEX idx_email ON customers(email);   |
|_______________________________________________________|
🔹 This prevents duplicate email entries.

✅ 3. Regular Index (B-Tree Index)
Used to speed up searches for non-unique columns.
 ________________________________________________________
|  CREATE INDEX idx_name ON customers(name);             | 
|________________________________________________________|
🔹 This improves queries like:
 ________________________________________________________|
|  SELECT * FROM customers WHERE name = 'John';
|________________________________________________________|


✅ 4. Composite Index (Multiple Columns)
Indexes multiple columns to optimize searches using both columns together.
 __________________________________________________________
|  CREATE INDEX idx_name_city ON customers(name, city);    |
|__________________________________________________________|
🔹 Optimizes queries like:
 ______________________________________________________________________
|  SELECT * FROM customers WHERE name = 'John' AND city = 'New York';  |
|______________________________________________________________________|


✅ 5. Full-Text Index
Used for text searches (like searching for words in large texts).
 _______________________________________________________________________
|  CREATE FULLTEXT INDEX idx_description ON products(description);      |
|_______________________________________________________________________|
🔹 Optimizes searches like:
 _______________________________________________________________________________
|  SELECT * FROM products WHERE MATCH(description) AGAINST('organic honey');    |
|_______________________________________________________________________________|


📌 Analyzing Query Performance Using EXPLAIN
The EXPLAIN command helps analyze queries to check if indexes are being used efficiently.

✅ Example: Running EXPLAIN on a Query
 ________________________________________________________________________________
|  EXPLAIN SELECT * FROM customers WHERE name = 'John';                          |
|________________________________________________________________________________|
🔹 This will show how MySQL executes the query, including:

🔹Which index is used?
🔹How many rows are scanned? (lower is better)
🔹Does MySQL use a full table scan? (bad for performance)


✅ Example Output of EXPLAIN
 ______________________________________________________________________________________________________
|  id | 	select_type	|   table	    |  type	 |   possible_keys	|    key    	 |   rows | 	  Extra    |
|_____|_______________|_____________|________|__________________|______________|________|______________|
|  1  |	  SIMPLE	    |   customers	|  ref	 |   idx_name	      |    idx_name  |  	1	  |  Using index |
|_____|_______________|_____________|________|__________________|______________|________|______________|
🔹 Key Column: Shows the index being used (idx_name)
🔹 Rows Column: Shows the number of rows scanned (lower is better)

📌 How to Optimize Queries?
✅ Create indexes on frequently searched columns
✅ Use composite indexes for multiple search conditions
✅ Avoid full table scans by checking EXPLAIN output
✅ Use LIMIT to reduce the number of scanned rows
